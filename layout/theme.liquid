<!doctype html>
<html>
  <head>
    <title>{{ page_title }}</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="description" content="{{ page_description | escape }}">
    <link rel="canonical" href="{{ canonical_url }}">
    <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">
    <link rel="stylesheet" href="https://use.typekit.net/fsd4fhx.css">
    {{ content_for_header }}
    <!-- Header hook for plugins -->

    {{ 'application.css' | asset_url | stylesheet_tag }}
    {{ 'application.js' | asset_url | script_tag }}

    <link rel="stylesheet" href="https://cdn.shopify.com/shopifycloud/model-viewer-ui/assets/v1.0/model-viewer-ui.css">
    <link rel="stylesheet" href="https://unpkg.com/swiper@7/swiper-bundle.min.css" />
    
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
      integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer" />

    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.2/dist/alpine.min.js" defer></script>
    <script src="https://unpkg.com/swiper@7/swiper-bundle.min.js" defer></script>

    <style>
      [x-cloak] {
        display: none !important;
      }
    </style>

    <!-- Light mode favicons -->
    <link rel="icon" type="image/png" href="{{ 'favicon-dark-96x96.png' | asset_url }}" sizes="96x96" media="(prefers-color-scheme: light)" />
    <link rel="icon" type="image/svg+xml" href="{{ 'favicon-dark.svg' | asset_url }}" media="(prefers-color-scheme: light)" />
    <link rel="shortcut icon" href="{{ 'favicon-dark.ico' | asset_url }}" media="(prefers-color-scheme: light)" />
    
    <!-- Dark mode favicons -->
    <link rel="icon" type="image/png" href="{{ 'favicon-96x96.png' | asset_url }}" sizes="96x96" media="(prefers-color-scheme: dark)" />
    <link rel="icon" type="image/svg+xml" href="{{ 'favicon.svg' | asset_url }}" media="(prefers-color-scheme: dark)" />
    <link rel="shortcut icon" href="{{ 'favicon.ico' | asset_url }}" media="(prefers-color-scheme: dark)" />
    
    <!-- These remain unchanged as they don't support different modes -->
    <link rel="apple-touch-icon" sizes="180x180" href="{{ 'apple-touch-icon.png' | asset_url }}" />
    <meta name="apple-mobile-web-app-title" content="MyWebSite" />
    <link rel="manifest" href="{{ 'site.webmanifest' | asset_url }}" />

    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "Ucore",
        "url": "https://ucore.co.uk",
        "logo": "https://ucore.co.uk/s/files/1/0910/8137/6066/files/ucore-logo.jpg?v=1742293039"
      }
      </script>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-TH6WYV2ZN7"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-TH6WYV2ZN7');

      document.addEventListener('DOMContentLoaded', function() {
        // Helper function to get product data
        function getProductData(element) {
          const form = element.closest('form[action="/cart/add"]');
          if (!form) return null;
          
          const variantId = form.querySelector('[name="id"]').value;
          const price = parseFloat(form.querySelector('[data-price]')?.dataset.price || 0);
          const productName = form.querySelector('[data-product-title]')?.dataset.productTitle;
          
          return {
            item_id: variantId,
            item_name: productName,
            price: price,
            currency: '{{ shop.currency }}'
          };
        }

        // Track add to cart events - both click and form submission
        document.body.addEventListener('submit', function(e) {
          if (e.target.matches('form[action="/cart/add"]')) {
            const productData = getProductData(e.target);
            if (productData) {
              gtag('event', 'add_to_cart', {
                currency: productData.currency,
                value: productData.price,
                items: [productData]
              });
            }
          }
        });

        // Track Ajax cart additions
        const originalFetch = window.fetch;
        window.fetch = function() {
          const request = arguments[0];
          const init = arguments[1];
          
          if (request && typeof request === 'string' && request.includes('/cart/add')) {
            const formData = init?.body instanceof FormData ? init.body : new URLSearchParams(init?.body);
            const variantId = formData.get('id');
            
            // Try to find product details from the page
            const productElement = document.querySelector(`[data-variant-id="${variantId}"]`);
            if (productElement) {
              gtag('event', 'add_to_cart', {
                currency: '{{ shop.currency }}',
                value: parseFloat(productElement.dataset.price || 0),
                items: [{
                  item_id: variantId,
                  item_name: productElement.dataset.productTitle,
                  price: parseFloat(productElement.dataset.price || 0),
                  currency: '{{ shop.currency }}'
                }]
              });
            }
          }
          
          return originalFetch.apply(this, arguments);
        };

        // Track product page views
        if (window.location.pathname.includes('/products/')) {
          const productData = getProductData(document.querySelector('form[action="/cart/add"]'));
          if (productData) {
            gtag('event', 'view_item', {
              currency: productData.currency,
              value: productData.price,
              items: [productData]
            });
          }
        }

        // Track collection/product list views
        if (window.location.pathname.includes('/collections/')) {
          const products = Array.from(document.querySelectorAll('.product-card')).map(card => ({
            item_id: card.dataset.productId,
            item_name: card.dataset.productTitle,
            price: parseFloat(card.dataset.productPrice || 0)
          }));

          gtag('event', 'view_item_list', {
            item_list_name: document.querySelector('h1')?.textContent?.trim(),
            items: products
          });
        }

        // Track cart views
        if (window.location.pathname.includes('/cart')) {
          const cartItems = Array.from(document.querySelectorAll('.cart-item')).map(item => ({
            item_id: item.dataset.variantId,
            item_name: item.dataset.productTitle,
            price: parseFloat(item.dataset.price || 0),
            quantity: parseInt(item.dataset.quantity || 1)
          }));

          gtag('event', 'view_cart', {
            currency: '{{ shop.currency }}',
            value: cartItems.reduce((total, item) => total + (item.price * item.quantity), 0),
            items: cartItems
          });
        }

        // Track checkout steps
        if (window.location.pathname.includes('/checkout')) {
          gtag('event', 'begin_checkout');
        }

        // Track search
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('q') || urlParams.has('query')) {
          gtag('event', 'search', {
            search_term: urlParams.get('q') || urlParams.get('query')
          });
        }

        // Track successful purchase
        if (Shopify && Shopify.checkout) {
          gtag('event', 'purchase', {
            transaction_id: Shopify.checkout.order_id,
            value: Shopify.checkout.total_price,
            currency: Shopify.checkout.currency,
            tax: Shopify.checkout.tax_price,
            shipping: Shopify.checkout.shipping_price,
            items: Shopify.checkout.line_items.map(item => ({
              item_id: item.variant_id,
              item_name: item.title,
              price: item.price,
              quantity: item.quantity
            }))
          });
        }

        // Track when users start the payment process
        document.body.addEventListener('click', function(e) {
          if (e.target.matches('.payment-button, .checkout-button')) {
            gtag('event', 'add_payment_info');
          }
        });

        // Track when users add shipping info
        document.body.addEventListener('change', function(e) {
          if (e.target.matches('[name*="shipping"], [name*="address"]')) {
            gtag('event', 'add_shipping_info');
          }
        });

        // Track when users create an account
        if (window.location.pathname.includes('/account') && document.querySelector('form[action="/account"]')) {
          gtag('event', 'sign_up');
        }
      });
    </script>

    <meta name="msvalidate.01" content="26803B326C309C052306B56DC80376F2" />

    <!-- Meta Pixel Code -->
    <script>
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', '1823474708447645');
      fbq('track', 'PageView');
      </script>
      <noscript><img height="1" width="1" style="display:none"
      src="https://www.facebook.com/tr?id=1823474708447645&ev=PageView&noscript=1"
      /></noscript>
      <!-- End Meta Pixel Code -->

  </head>
  <body>

    {% section 'header' %}

    <main role="main">
      {{ content_for_layout }}
    </main>

    {% section 'footer' %}
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const seeMoreBtn = document.querySelector('.js-see-more-btn');
        const extraUsps = document.querySelectorAll('.js-extra-usp');

        if (seeMoreBtn) {
            seeMoreBtn.addEventListener('click', function() {
                const isShowing = seeMoreBtn.textContent === 'See More';
                seeMoreBtn.textContent = isShowing ? 'See Less' : 'See More';

                if (isShowing) {
                    // Show items with staggered delay
                    extraUsps.forEach((usp, index) => {
                        usp.classList.remove('hidden');
                        setTimeout(() => {
                            usp.classList.add('show');
                        }, index * 150); // 150ms delay between each item
                    });
                } else {
                    // Hide items with staggered delay
                    extraUsps.forEach((usp, index) => {
                        usp.classList.remove('show');
                        setTimeout(() => {
                            usp.classList.add('hidden');
                        }, 300); // Wait for fade out to complete
                    });
                }
            });
        }
    });
    </script>

    {{ 'scripts.js' | asset_url | script_tag }}
    
  </body>
</html>